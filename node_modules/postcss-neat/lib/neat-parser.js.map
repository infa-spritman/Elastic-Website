{"version":3,"sources":["neat-parser.js"],"names":[],"mappings":"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","file":"neat-parser.js","sourcesContent":["'use strict';\n\nrequire('babel-polyfill');\n\nimport postcss from 'postcss';\nimport neatCore from './core';\nimport neatGrid from './grid';\n\nlet options = {};\nlet ampInsertedNodes = {};\n\nconst atRules = {\n  'fill-parent' () {\n    return neatGrid.fillParent(options);\n  },\n  'omega' (query, direction) {\n    return neatGrid.omega(query, direction, options);\n  },\n  'outer-container' (maxWidth) {\n    return neatGrid.outerContainer(maxWidth, options);\n  },\n  'pad' (...padding) {\n    return neatGrid.pad(padding, options);\n  },\n  'row' (display) {\n    return neatGrid.row(display, options);\n  },\n  'shift' (columns, containerColumns, direction) {\n    return neatGrid.shift(columns, containerColumns, direction, options);\n  },\n  'show-grid' (columns, containerColumns, location, direction) {\n    return neatGrid.showGrid(columns, containerColumns, location, direction, options);\n  },\n  'span-columns' (columns, containerColumns, display, direction) {\n    return neatGrid.spanColumns(columns, containerColumns, display, direction, options);\n  }\n};\n\nconst unwrapAmp = (nodeSelector, node) => {\n  if (nodeSelector.indexOf('&:') >= 0 && node.name !== 'media') {\n    return node.selectors.map((selector) => {\n      return nodeSelector.replace(/&/g, selector);\n    }).join(',');\n  }\n  return nodeSelector;\n};\n\nconst getGlobalSelector = (node) => {\n  if (node.parent && node.parent.type === 'atrule') {\n    return `${node.parent.name} ${node.parent.params} ${node.selector}`;\n  } else if (node.name === 'media') {\n    return getGlobalSelector(node.parent);\n  }\n  return node.selector;\n};\n\nconst applyRuleSetToNode = (ruleSet, node, currentAtRule) => {\n  Object.keys(ruleSet).forEach((prop) => {\n    let rule = ruleSet[prop];\n    if (typeof rule === 'object') {\n      if (node.name !== 'media') {\n        let extRule = postcss.rule({ selector: unwrapAmp(prop, node) });\n        applyRuleSetToNode(rule, extRule);\n\n        let globalSelector = getGlobalSelector(node);\n        node.parent.insertAfter(ampInsertedNodes[globalSelector] || node, extRule);\n        ampInsertedNodes[globalSelector] = extRule;\n      } else {\n        let mediaNestedRule = postcss.parse(`${prop} ${JSON.stringify(rule).replace(/\"/g, '')}`);\n        node.append(mediaNestedRule);\n      }\n    } else {\n      if (currentAtRule) {\n        node.insertBefore(currentAtRule, { prop, value: rule });\n      } else {\n        node.append({ prop, value: rule });\n      }\n    }\n  });\n};\n\nexport default postcss.plugin('postcss-neat', (opts) => {\n  options = Object.assign({}, neatCore.variables, opts);\n  return (root) => {\n    ampInsertedNodes = {};\n    root.walkAtRules(/^neat-/i, (rule) => {\n      let atRule = rule.name.trim().replace('neat-', '');\n      if (atRules[atRule]) {\n        let params = rule.params.trim() ? rule.params.trim().split(' ') : [];\n        let ruleSet = atRules[atRule](...params);\n        applyRuleSetToNode(ruleSet, rule.parent, rule);\n      }\n      rule.remove();\n    });\n  };\n});\n"],"sourceRoot":"/source/"}