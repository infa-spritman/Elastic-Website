{"version":3,"sources":["grid/show-grid.es6.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,IAAM,gBAAgB,SAAhB,aAAgB,GAAgB;MAAf,+DAAS,iBAAM;;AACpC,SAAO,MAAM,IAAN,CAAW,IAAI,KAAJ,CAAU,MAAV,CAAX,EAA8B,UAAC,CAAD,EAAI,CAAJ;WAAU;GAAV,CAArC,CADoC;CAAhB;;AAItB,IAAI,WAAW,SAAX,QAAW,CAAC,OAAD,EAAU,gBAAV,EAA4B,QAA5B,EAAsC,SAAtC,EAAyE;MAAxB,qGAAwB;;AACtF,YAAU,WAAW,QAAQ,kBAAR,CADiE;AAEtF,qBAAmB,oBAAoB,QAAQ,eAAR,CAF+C;AAGtF,aAAW,YAAY,QAAQ,iBAAR,CAH+D;AAItF,cAAY,aAAa,QAAQ,oBAAR,CAJ6D;;AAMtF,MAAI,eAAe,EAAE,mBAAmB,OAAnB,CAAF,CANmE;AAOtF,MAAI,aAAa,sBAAU,YAAV,CAAuB,SAAvB,CAAb,CAPkF;AAQtF,MAAI,cAAc,sBAAU,SAAV,CAAoB,OAApB,EAA6B,gBAA7B,EAA+C,QAAQ,eAAR,EAAyB,QAAQ,eAAR,CAAtF,CARkF;AAStF,MAAI,eAAe,sBAAU,UAAV,CAAqB,gBAArB,EAAuC,QAAQ,eAAR,EAAyB,QAAQ,eAAR,CAA/E,CATkF;;AAWtF,MAAI,WAAW,cAAc,YAAd,EAA4B,MAA5B,CAAmC,UAAC,IAAD,EAAO,GAAP,EAAe;AAC/D,QAAI,aAAa,cAAc,GAAd,GAAoB,eAAe,GAAf,CAD0B;AAE/D,QAAI,WAAW,eAAe,MAAM,CAAN,CAAf,GAA0B,eAAe,GAAf,CAFsB;AAG/D,QAAI,aAAa,QAAb,CAH2D;AAI/D,QAAI,WAAW,eAAe,MAAM,CAAN,CAAf,GAA0B,gBAAgB,MAAM,CAAN,CAAhB,CAJsB;AAK/D,SAAK,IAAL,CAAa,QAAQ,cAAR,SAA0B,sBAAU,UAAV,CAAqB,UAArB,WAAqC,QAAQ,cAAR,SAA0B,sBAAU,UAAV,CAAqB,QAArB,CAAtG,EAL+D;AAM/D,QAAI,MAAM,eAAe,CAAf,EAAkB;AAC1B,WAAK,IAAL,kBAAyB,sBAAU,UAAV,CAAqB,UAArB,uBAAiD,sBAAU,UAAV,CAAqB,QAArB,CAA1E,EAD0B;KAA5B;AAGA,WAAO,IAAP,CAT+D;GAAf,EAU/C,CAAC,WAAW,SAAX,KAAyB,OAAzB,GAAmC,UAAnC,GAAgD,SAAhD,CAVW,CAAX;;;AAXkF,MAwBlF,aAAa,YAAb,EAA2B;AAC7B,WAAO;AACL,yCAAiC,SAAS,IAAT,CAAc,GAAd,OAAjC;KADF,CAD6B;GAA/B,MAIO,IAAI,aAAa,QAAb,IAAyB,aAAa,OAAb,EAAsB;AACxD,sCACQ,UAAa;AACjB,yCAAiC,SAAS,IAAT,CAAc,GAAd,OAAjC;AACA,gBAAU,GAAV;AACA,iBAAW,OAAX;AACA,cAAQ,GAAR;AACA,kBAAY,UAAZ;AACA,eAAS,GAAT;AACA,aAAO,GAAP;MARJ,CADwD;GAAnD;CA5BM;;kBA2CA","file":"grid/show-grid.es6.js","sourcesContent":["'use strict';\n\nimport variables from '../core/variables.es6.js';\nimport functions from '../core/functions.es6.js';\n\n// Creates a debugging grid for the parent of columns. Works in conjunction with `@neat-outer-container`.\n//\n// @columns\n//   The unitless number of columns the element spans. If is not passed, it is equal to `@neatElementColumns`.\n//   `@columns` also accepts decimals for when it's necessary to break out of the standard grid.\n//   E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n//\n// @container-columns\n//   The number of columns the parent element spans. If is not passed, it is equal to `@neatGridColumns`,\n//   the total number of columns in the grid.\n//\n// @location\n//   The location of where the grid will be applied to: ['before', 'after' or 'background']\n//\n// @example - PostCSS Usage\n//    .element {\n//      @neat-outer-container;\n//      @neat-show-grid 4 12;\n//    }\n//\n// @example - CSS Output\n//    .element {\n//      *zoom: 1;\n//      max-width: 128em;\n//      margin-left: auto;\n//      margin-right: auto;\n//    }\n//    .element:before,\n//    .element:after {\n//      content: \" \";\n//      display: table;\n//    }\n//    .element:after {\n//      clear: both;\n//      background: linear-gradient(to right,\n//        #ecf0f1 0, #ecf0f1 31.7615656%,\n//        transparent 31.7615656%, transparent 34.1192172%,\n//        #ecf0f1 34.1192172%, #ecf0f1 65.88078280%,\n//        transparent 65.88078280%, transparent 68.2384344%,\n//        #ecf0f1 68.2384344%, #ecf0f1 100%);\n//      bottom: 0;\n//      display: block;\n//      left: 0;\n//      position: absolute;\n//      right: 0;\n//      top: 0\n//    }\n//\n\nconst generateArray = (length = 0) => {\n  return Array.from(new Array(length), (x, i) => i);\n};\n\nlet showGrid = (columns, containerColumns, location, direction, options = variables) => {\n  columns = columns || options.neatElementColumns;\n  containerColumns = containerColumns || options.neatGridColumns;\n  location = location || options.debugGridLocation;\n  direction = direction || options.neatDefaultDirection;\n\n  let columnsCount = +(containerColumns / columns);\n  let directions = functions.getDirection(direction);\n  let columnWidth = functions.flexWidth(columns, containerColumns, options.neatColumnWidth, options.neatGutterWidth);\n  let columnGutter = functions.flexGutter(containerColumns, options.neatColumnWidth, options.neatGutterWidth);\n\n  let gradient = generateArray(columnsCount).reduce((memo, idx) => {\n    let startColor = columnWidth * idx + columnGutter * idx;\n    let endColor = columnWidth * (idx + 1) + columnGutter * idx;\n    let startBlank = endColor;\n    let endBlank = columnWidth * (idx + 1) + columnGutter * (idx + 1);\n    memo.push(`${options.debugGridColor} ${functions.percentage(startColor)}, ${options.debugGridColor} ${functions.percentage(endColor)}`);\n    if (idx < columnsCount - 1) {\n      memo.push(`transparent ${functions.percentage(startBlank)}, transparent ${functions.percentage(endBlank)}`);\n    }\n    return memo;\n  }, [directions.direction === 'right' ? 'to right' : 'to left']);\n\n  // 'before', 'after' or 'background'\n  if (location === 'background') {\n    return {\n      'background': `linear-gradient(${gradient.join(',')})`\n    };\n  } else if (location === 'before' || location === 'after') {\n    return {\n      [`&:${location}`]: {\n        'background': `linear-gradient(${gradient.join(',')})`,\n        'bottom': '0',\n        'display': 'block',\n        'left': '0',\n        'position': 'absolute',\n        'right': '0',\n        'top': '0'\n      }\n    };\n  }\n};\n\nexport default showGrid;\n"],"sourceRoot":"/source/"}