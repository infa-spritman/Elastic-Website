{"version":3,"sources":["grid/row.es6.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAI,MAAM,SAAN,GAAM,CAAC,OAAD,EAAkC;MAAxB,qGAAwB;;AAC1C,YAAU,WAAW,QAAQ,kBAAR,CADqB;;AAG1C,MAAI,YAAY,OAAZ,EAAqB;AACvB,WAAO,OAAO,MAAP,CAAc;AACnB,iBAAW,OAAX;AACA,sBAAgB,OAAhB;KAFK,EAGJ,6BAHI,CAAP,CADuB;GAAzB,MAKO;AACL,WAAO,OAAO,MAAP,CAAc;AACnB,iBAAW,OAAX;KADK,EAEJ,sBAAU,QAAV,EAFI,CAAP,CADK;GALP;CAHQ;;kBAeK","file":"grid/row.es6.js","sourcesContent":["'use strict';\n\nimport variables from '../core/variables.es6.js';\nimport functions from '../core/functions.es6.js';\nimport fillParent from './fill-parent.es6.js';\n\n// Designates the element as a row of columns in the grid layout. It clears the floats on the element and\n// sets its display property. Rows can't be nested, but there can be more than one row element\n// with different display properties per layout.\n//\n// @display\n//  Sets the display property of the element and the display context that\n//  will be used by its children. Can be `block` or `table`.\n//\n// @direction\n//  Sets the layout direction. Can be `LTR` (left-to-right) or `RTL` (right-to-left).\n//\n// @example - PostCSS Usage\n//  .element {\n//    @neat-row;\n//  }\n//\n// @example - CSS Output\n//  .element {\n//    *zoom: 1;\n//    display: block;\n//  }\n//\n// .element:before,\n// .element:after {\n//   content: \" \";\n//   display: table;\n// }\n//\n// .element:after {\n//   clear: both;\n// }\n//\n\nlet row = (display, options = variables) => {\n  display = display || options.neatDefaultDisplay;\n\n  if (display === 'table') {\n    return Object.assign({\n      'display': 'table',\n      'table-layout': 'fixed'\n    }, fillParent());\n  } else {\n    return Object.assign({\n      'display': 'block'\n    }, functions.clearfix());\n  }\n};\n\nexport default row;\n"],"sourceRoot":"/source/"}