{"version":3,"sources":["grid/omega.es6.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,IAAI,QAAQ,SAAR,KAAQ,CAAC,KAAD,EAAQ,SAAR,EAA2C;MAAxB,qGAAwB;;AACrD,cAAY,aAAa,QAAQ,oBAAR,CAD4B;;AAGrD,MAAI,aAAa,sBAAU,YAAV,CAAuB,SAAvB,CAAb,CAHiD;AAIrD,MAAI,CAAC,KAAD,EAAQ;AACV,2CACa,WAAW,SAAX,EAAyB,EADtC,CADU;GAAZ,MAIO,IAAI,UAAU,MAAV,EAAkB;AAC3B,WAAO;AACL,sDACa,WAAW,SAAX,EAAyB,EADtC;KADF,CAD2B;GAAtB,MAMA,IAAI,KAAJ,EAAW;AAChB,QAAI,8CACc,6CACH,WAAW,SAAX,EAAyB,GAFpC,CADY;;AAOhB,QAAI,MAAM,OAAN,CAAc,GAAd,KAAsB,CAAtB,EAAyB;AAC3B,8BAAsB,eAAtB,IAAsC;AACpC,iBAAS,WAAW,iBAAX;OADX,CAD2B;KAA7B;;AAMA,WAAO,MAAP,CAbgB;GAAX;CAdG;;kBA+BG","file":"grid/omega.es6.js","sourcesContent":["'use strict';\n\nimport variables from '../core/variables.es6.js';\nimport functions from '../core/functions.es6.js';\n\n// Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property.\n// It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.\n//\n// @query\n//   Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`).\n//\n//   When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically\n//   adds a clear to the `*n+1` th element.\n//\n//   Note that composite arguments such as `2n+1` do not support this feature.\n//\n// @direction\n//  Sets the layout direction. Can be `LTR` (left-to-right) or `RTL` (right-to-left).\n//\n// @example - PostCSS Usage\n//   .element {\n//     @neat-omega;\n//   }\n//\n//   .nth-element {\n//     @neat-omega 4n;\n//   }\n//\n//   .auto-element {\n//     @neat-omega auto;\n//   }\n//\n// @example - CSS Output\n//   .element {\n//     margin-right: 0;\n//   }\n//\n//   .nth-element:nth-child(4n) {\n//     margin-right: 0;\n//   }\n//\n//   .nth-element:nth-child(4n+1) {\n//     clear: left;\n//   }\n//\n//   .auto-element:last-child {\n//     margin-right: 0;\n//   }\n//\n\nlet omega = (query, direction, options = variables) => {\n  direction = direction || options.neatDefaultDirection;\n\n  let directions = functions.getDirection(direction);\n  if (!query) {\n    return {\n      [`margin-${directions.direction}`]: 0\n    };\n  } else if (query === 'auto') {\n    return {\n      '&:last-child': {\n        [`margin-${directions.direction}`]: 0\n      }\n    };\n  } else if (query) {\n    let result = {\n      [`&:nth-child(${query})`]: {\n        [`margin-${directions.direction}`]: 0\n      }\n    };\n\n    if (query.indexOf('n') >= 0) {\n      result[`&:nth-child(${query} + 1)`] = {\n        'clear': directions.oppositeDirection\n      };\n    }\n\n    return result;\n  }\n};\n\nexport default omega;\n"],"sourceRoot":"/source/"}