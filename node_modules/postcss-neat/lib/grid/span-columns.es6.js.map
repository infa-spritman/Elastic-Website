{"version":3,"sources":["grid/span-columns.es6.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,IAAI,cAAc,SAAd,WAAc,CAAC,OAAD,EAAU,gBAAV,EAA4B,OAA5B,EAAqC,SAArC,EAAwE;MAAxB,qGAAwB;;AACxF,YAAU,WAAW,QAAQ,kBAAR,CADmE;AAExF,qBAAmB,oBAAoB,QAAQ,eAAR,CAFiD;AAGxF,YAAU,WAAW,QAAQ,kBAAR,CAHmE;AAIxF,cAAY,aAAa,QAAQ,oBAAR,CAJ+D;;AAMxF,MAAI,aAAa,sBAAU,YAAV,CAAuB,SAAvB,CAAb,CANoF;AAOxF,MAAI,cAAc,sBAAU,SAAV,CAAoB,OAApB,EAA6B,gBAA7B,EAA+C,QAAQ,eAAR,EAAyB,QAAQ,eAAR,CAAtF,CAPoF;AAQxF,MAAI,eAAe,sBAAU,UAAV,CAAqB,gBAArB,EAAuC,QAAQ,eAAR,EAAyB,QAAQ,eAAR,CAA/E,CARoF;;AAUxF,MAAI,YAAY,OAAZ,EAAqB;AACvB,WAAO;AACL,iBAAW,YAAX;AACA,eAAS,sBAAU,UAAV,CAAqB,UAAU,gBAAV,CAA9B;KAFF,CADuB;GAAzB,MAKO,IAAI,YAAY,gBAAZ,EAA8B;AACvC,WAAO;AACL,iBAAW,OAAX;AACA,eAAS,WAAW,iBAAX;AACT,eAAS,sBAAU,UAAV,CAAqB,cAAc,YAAd,CAA9B;;AAEA,sBAAgB;AACd,iBAAS,sBAAU,UAAV,CAAqB,WAArB,CAAT;OADF;KALF,CADuC;GAAlC,MAUA;;;AACL;AACE,iBAAW,OAAX;AACA,eAAS,WAAW,iBAAX;yCACE,WAAW,SAAX,EAAyB,sBAAU,UAAV,CAAqB,YAArB,0BACpC,SAAS,sBAAU,UAAV,CAAqB,WAArB,0BAET,gDACa,WAAW,SAAX,EAAyB,SAPxC,CADK;GAVA;CAfS;;kBAuCH","file":"grid/span-columns.es6.js","sourcesContent":["'use strict';\n\nimport variables from '../core/variables.es6.js';\nimport functions from '../core/functions.es6.js';\n\n// Specifies the number of columns an element should span. If the selector is nested the number of columns\n// of its parent element should be passed as an argument as well.\n//\n// @columns\n//   The unitless number of columns the element spans. If is not passed, it is equal to `@neatElementColumns`.\n//   `@columns` also accepts decimals for when it's necessary to break out of the standard grid.\n//   E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n//\n// @container-columns\n//   The number of columns the parent element spans. If is not passed, it is equal to `@neatGridColumns`,\n//   the total number of columns in the grid.\n//\n// @display\n//   Sets the display property of the element. By default it sets the display property of the element to `block`.\n//   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n//   If passed `table`, it sets the display property to `table-cell` and calculates the width of the\n//   element without taking gutters into consideration. The result does not align with the block-based grid.\n//\n// @example - PostCSS Usage\n//   .element {\n//     @neat-span-columns 6;\n//\n//    .nested-element {\n//      @neat-span-columns 2 6;\n//    }\n//  }\n//\n// @example - CSS Output\n//   .element {\n//     display: block;\n//     float: left;\n//     margin-right: 2.3576516%;\n//     width: 48.8211742%;\n//   }\n//\n//   .element:last-child {\n//     margin-right: 0;\n//   }\n//\n//   .element .nested-element {\n//     display: block;\n//     float: left;\n//     margin-right: 4.82915791%;\n//     width: 30.11389472%;\n//   }\n//\n//   .element .nested-element:last-child {\n//     margin-right: 0;\n//   }\n//\n\nlet spanColumns = (columns, containerColumns, display, direction, options = variables) => {\n  columns = columns || options.neatElementColumns;\n  containerColumns = containerColumns || options.neatGridColumns;\n  display = display || options.neatDefaultDisplay;\n  direction = direction || options.neatDefaultDirection;\n\n  let directions = functions.getDirection(direction);\n  let columnWidth = functions.flexWidth(columns, containerColumns, options.neatColumnWidth, options.neatGutterWidth);\n  let columnGutter = functions.flexGutter(containerColumns, options.neatColumnWidth, options.neatGutterWidth);\n\n  if (display === 'table') {\n    return {\n      'display': 'table-cell',\n      'width': functions.percentage(columns / containerColumns)\n    };\n  } else if (display === 'block-collapse') {\n    return {\n      'display': 'block',\n      'float': directions.oppositeDirection,\n      'width': functions.percentage(columnWidth + columnGutter),\n      // ---\n      '&:last-child': {\n        'width': functions.percentage(columnWidth)\n      }\n    };\n  } else {\n    return {\n      'display': 'block',\n      'float': directions.oppositeDirection,\n      [`margin-${directions.direction}`]: functions.percentage(columnGutter),\n      'width': functions.percentage(columnWidth),\n      // ---\n      '&:last-child': {\n        [`margin-${directions.direction}`]: 0\n      }\n    };\n  }\n};\n\nexport default spanColumns;\n"],"sourceRoot":"/source/"}